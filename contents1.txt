    Дипломная работа по теме: 1. Анализ и сравнение написания web-приложений с использованием разных фреймворков:
Разработать простые веб-приложения с использованием Django, Flask и FastAPI, провести их сравнение.
    Автор: Вереин Михаил Павлович
    Оглавление дипломной работы:
    Contents
1. Введение. 6
    Обоснование выбора темы: 6
    Определение цели и задач исследования: 6
2. Основные понятия и определения. 8
3. Методы и подходы к разработке. 10
    Выбор и интеграция предобученной модели. 10
    Архитектура веб-приложения. 10
    Обеспечение безопасности. 10
4. Обзор популярных инструментов для разработки разработки веб-приложений на Python 10
    Django. 10
    Flask. 11
    FastAPI 11
5. Проектирование приложения. 12
    Планирование и анализ требований. 12
    Основные требования. 12
    Технические требования. 12
6. Разработка в соответствии с созданной документацией. 13
    Планирование разработки. 13
    Разработка. 13
7. Анализ и интерпретация результатов. 13
    Сравнение моделей. 13
    Интерпретация результатов. 14
    Рекомендации по выбору модели в зависимости от проекта. 14
8. Заключение. 14
    Обзор выполненной работы.. 14
    Дальнейшие планы.. 14


1. Введение
    1.1. Обоснование выбора темы:
    1.1.1. Актуальность темы:
    В современном мире веб-приложения играют ключевую роль в бизнесе, образовании, здравоохранении и многих других
сферах. Выбор правильного фреймворка для разработки веб-приложений может значительно упростить процесс разработки,
повысить производительность и улучшить качество конечного продукта. Тема "Разработка простых веб-приложений с
использованием Django, Flask и FastAPI" актуальна, так как позволяет исследовать и сравнить три популярных фреймворка,
которые широко используются в индустрии. Это поможет разработчикам принимать обоснованные решения при выборе инструментов
для своих проектов.
    1.1.2. Научная новизна:
    Научная новизна данной темы заключается в том, что она предоставляет сравнительный анализ трех различных фреймворков,
который может вносить новые знания в область веб-разработки. Исследование может выявить новые аспекты, преимущества и
недостатки каждого из фреймворков, что может быть полезно для академического сообщества и практикующих разработчиков.
    1.1.3. Практическая значимость:
    Практическая значимость темы очевидна, так как результаты исследования могут быть непосредственно применены в
реальных проектах. Разработчики, которые стоят перед выбором фреймворка, могут использовать полученные данные для принятия
более информированных решений. Это может привести к созданию более эффективных, безопасных и масштабируемых веб-приложений,
что в конечном итоге повысит конкурентоспособность компаний и удовлетворенность пользователей.
    1.1.4. Доступность источников:
    Доступность источников информации является важным фактором для успешного проведения исследования. В случае с
веб-разработкой, существует множество доступных источников, включая официальную документацию, учебные материалы, статьи,
блоги и форумы, посвященные Django, Flask и FastAPI. Это позволяет легко получить необходимую информацию для проведения
сравнения и анализа.
    1.1.5. Личные интересы и компетенции:
    Личные интересы и компетенции играют важную роль в выборе темы. Имея опыт работы с веб-разработкой и знакомство с
фреймворками Django, Flask и FastAPI упростить процесс исследования и позволит глубже проанализировать их особенности и
возможности. Также, может стимулировать более глубокое погружение в тему и получение более качественных результатов.
    1.1.6. Заключение
    Таким образом, тема "Разработка простых веб-приложений с использованием Django, Flask и FastAPI" была выбрана из-за
ее актуальности в современной IT-индустрии, научной новизны, практической значимости, доступности источников и личных
интересов. Исследование позволит сравнить различные фреймворки и определить их преимущества и недостатки, что имеет как
академическую, так и практическую ценность.
    1.2. Задачи исследования:
    1.2.1. Провести анализ существующих работ и статей, посвященных фреймворкам Django, Flask и FastAPI, для определения
ключевых особенностей и сравнительных характеристик.
    1.2.2. Разработать простые веб-приложения с использованием каждого из фреймворков, чтобы получить практический опыт
и данные для сравнения.
    1.2.3. Сравнить производительность, удобство использования и другие аспекты разработанных приложений, используя
различные метрики и инструменты тестирования.
    1.2.4. Определить критерии, которые могут помочь разработчикам выбрать подходящий фреймворк для своих проектов, и
проанализировать влияние различных проектных требований на выбор.
    1.2.5. Сформулировать выводы и рекомендации на основе полученных результатов и сравнительного анализа, и опубликовать
их в подходящих форматах.
    Таким образом, задачи исследования помогают структурировать процесс исследования, определить конкретные шаги и цели,
которые необходимо достичь для получения значимых результатов.
    2. Основные понятия и определения
    Веб-фреймворк: Программная платформа, предоставляющая стандартные способы построения и развертывания веб-приложений,
упрощающая разработку за счет готовых компонентов и инструментов.
    Django: Высокоуровневый веб-фреймворк на языке Python, поддерживающий быструю разработку и чистый дизайн, с множеством
встроенных функций.
    Flask: Микрофреймворк для веб-разработки на языке Python, предлагающий гибкость и простоту, идеальный для небольших
проектов и прототипов.
    FastAPI: Современный, высокопроизводительный веб-фреймворк для создания API с Python 3.6+, использующий асинхронность
и автоматическую генерацию документации.
    ORM: Технология программирования, преобразующая данные между несовместимыми системами типов в объектно-ориентированных
языках и реляционных базах данных.
    Маршрутизация URL: Процесс сопоставления URL-адресов с функциями представления в веб-приложении.
    Шаблонизатор: Инструмент для создания HTML или другого кода, включающий динамические данные, упрощающий разделение
логики и представления.
    API: Набор правил и протоколов для построения и интеграции программного обеспечения, позволяющий приложениям
взаимодействовать друг с другом.
    Асинхронность: Парадигма программирования, позволяющая выполнять несколько операций одновременно без ожидания
завершения каждой из них.
    Производительность: Мера эффективности и скорости выполнения функций приложения, измеряемая количеством запросов, временем
отклика и другими метриками.
    Веб-приложение (Web Application): Программное приложение, которое работает на веб-сервере и доступно через браузер.



3. Методы и подходы к разработке

Выбор и интеграция предобученной модели

Выбор модели: Начнем с анализа задач, которые наше веб-приложение должно решать, и выберем подходящую предобученную модель машинного обучения. Например, для задач распознавания объектов можно использовать такие модели, как YOLO, ResNet, VGG или Inception.

Интеграция модели: После выбора модели, необходимо интегрировать её в веб-приложение. Это может включать в себя загрузку модели, настройку её параметров и подключение к фреймворку для выполнения анализа.

Архитектура веб-приложения

Frontend и Backend: фронтенд (интерфейс пользователя) и бэкенд (серверная логика). Фронтенд может быть разработан с использованием HTML, CSS и JavaScript, а бэкенд может быть реализован на Python с использованием фреймворков, таких как Flask или Django.

REST API: Для связи между фронтендом и бэкендом можно использовать REST API. Это позволит фронтенду отправлять изображения или другие данные на сервер для обработки моделью и получать результаты.

Обеспечение безопасности

Аутентификация и авторизация: Можно настроить авторизацию пользователей, чтобы например у каждого был доступ к своей статистике проверок моделей.



4. Обзор популярных инструментов для разработки разработки веб-приложений на Python

Основные – Django, Flask, FastAPI, ниже более подробное описание.

Django

Django —фреймворк для веб-разработки на Python.

Основные возможности:

· Встроенная страница администрирования для управления данными.

· ORM (Object-Relational Mapping) для работы с базами данных.

· Поддержка аутентификации пользователей и управления доступом.

· Мощная система маршрутизации URL.

· Шаблонизатор для создания HTML-шаблонов.

Особенности:

Идеально подходит для больших и сложных проектов благодаря своей полной экосистеме.

Flask

Это фреймворк для веб-разработки на Python. Обеспечивает простоту и гибкость.

Основные возможности:

Минималистичный подход: только основные компоненты без лишних зависимостей.

Высокая гибкость для добавления нужных библиотек и модулей.

Jinja2 для шаблонов и Werkzeug для маршрутизации и обработки запросов.

Особенности:

Подходит для небольших и средних проектов, где требуется большая гибкость.

FastAPI

Это современный, высокопроизводительный фреймворк для создания API с Python 3.7+ на основе стандартов OpenAPI и JSON Schema.

Основные возможности:

· Высокая производительность благодаря использованию асинхронного программирования (async/await).

· Автоматическая генерация интерактивной документации API.

· Поддержка валидирования и аннотаций типов данных.

· Интеграция с различными библиотеками и инструментами, такими как Pydantic и SQLAlchemy.

Особенности:

Часто используется для создания API и микросервисов.



5. Проектирование приложения

Планирование и анализ требований

Выбор фреймворка и инструментов: Определение наиболее подходящего фреймворка (например, Django, Flask или FastAPI) и инструментов для разработки.

Определение структуры приложения: Разработка схемы архитектуры, включающей фронтенд, бэкенд, базу данных и интеграцию с предобученной моделью.

Разработка прототипа

Реализация основного функционала: Создание базовой версии приложения с минимально необходимым функционалом для тестирования и демонстрации.

Разработка ключевого функционала

Интеграция предобученной модели: Подключение и настройка выбранной модели машинного обучения для распознавания объектов.

Создание API для взаимодействия с фронтендом: Разработка REST API для обработки запросов от пользовательского интерфейса.

Реализация пользовательского интерфейса: Создание форм и страниц для загрузки изображений, отображения результатов и взаимодействия с пользователем.

Основные требования

Загрузка изображений: Пользователь должен иметь возможность загружать изображения для анализа.

Распознавание объектов: Приложение должно использовать предобученную модель для распознавания объектов на загруженных изображениях.

Отображение результатов: Приложение должно отображать результаты распознавания объектов, включая метки и вероятность для каждого объекта.

Технические требования

Фронтенд: использовать HTML, CSS, JavaScript, возможно Bootstrap

Бэкенд: Python с использованием фреймворков Django.

База данных: Использование базы данных (например, PostgreSQL) для хранения данных о пользователях и истории загрузок.

API: Разработка API для взаимодействия между фронтендом и бэкендом.

Интеграция с моделью машинного обучения: Подключение предобученной модели для обработки изображений и выдачи результатов.

6. Разработка в соответствии с созданной документацией

Планирование разработки

Разработка была разделена на несколько основных этапов: проектирование интерфейса, реализация серверной логики и интеграция модели машинного обучения. Планирование задач и отслеживание прогресса осуществлялось в программе Obsidian.

Разработка

Фронтенд-разработка:

Создан пользовательский интерфейс с использованием Jinja2 для шаблонов и Bootstrap для стилизации.

Разработаны формы загрузки изображений и страницы отображения результатов распознавания. Создана страница авторизации.

Рис. 1 Страница авторизации

Рис. 2 Изображение и результаты обработки

Рис. 3 Пример обработанного изображения крупным планом

Рис. 4 Пример перегруженного объектами изображения, на нём VGG ничего не смогло обнаружить

Бэкенд-разработка:

Реализована серверная логика с использованием фреймворка Django.

Настроены маршруты для обработки загрузок изображений, взаимодействия с моделью машинного обучения и передача результатов на фронтенд.

Интеграция модели машинного обучения:

Подключена и настроена предобученная модель VGG для выполнения распознавания объектов.

Реализована обработка результатов модели (обнаруженные объекты обводятся рамкой) и их отображение на веб-страницах.

Рис. 5 Файловая структура проекта



7. Анализ и интерпретация результатов

Сравнение моделей

Были протестированы различные предобученные модели, включая VGG, на различных наборах данных.

Основные метрики, такие как достоверность, полнота, точность (precision) и время отклика, были использованы для оценки производительности каждой модели.

Интерпретация результатов

Модель VGG показала высокую точность распознавания объектов, но время отклика было выше по сравнению с более легкими моделями.

Другие модели, такие как YOLO и ResNet, также продемонстрировали хорошие результаты, с различиями в скорости и точности.

Рекомендации по выбору модели в зависимости от проекта

Для задач, требующих высокой точности и допускающих большее время отклика, рекомендуется использовать модель VGG.

Для задач, где важна скорость обработки, можно рассмотреть использование моделей YOLO или других легковесных моделей.



8. Заключение

Обзор выполненной работы

Проектирование и разработка веб-приложения для распознавания объектов были успешно завершены в соответствии с изначально созданной документацией. Приложение включает функционал загрузки изображений, обработки с использованием модели VGG и отображения результатов.

Реализованное приложение соответствует требованиям и демонстрирует высокую точность распознавания объектов.

Модель VGG показала хорошие результаты в тестах, однако возможно использование других моделей для улучшения времени отклика.

Дальнейшие планы

Будет полезным создание сводной статистики по всем моделям, со всеми метриками эффективности, чтобы пользователи могли самостоятельно выбирать наиболее подходящую модель на основе полных данных.

Планируется добавление новых функций, таких как сохранение истории загрузок и результатов, улучшение интерфейса и расширение функциональности.